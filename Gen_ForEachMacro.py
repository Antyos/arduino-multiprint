"""
Generate the Multiprint library

The Multiprint libraries ustilizes C++ macros. Due to a limitation of these
macros, a case must be defined for every number of possible parameters. This
script generates those cases.

Based on: https://stackoverflow.com/questions/1872220/is-it-possible-to-iterate-over-arguments-in-variadic-macros

"""
from os import path
from datetime import datetime
from typing import List

for_each_count: int = 10

#
# Strings
#
serial_multiprint_description = f"""\
/******************************************************************************
 * This file is auto-generated by {path.basename(__file__)}
 *
 * Last updated: {datetime.today().strftime('%Y-%m-%d')}
 *
 *****************************************************************************/
"""

define_concat = """\
#define CONCATENATE(arg1, arg2)   CONCATENATE1(arg1, arg2)
#define CONCATENATE1(arg1, arg2)  CONCATENATE2(arg1, arg2)
#define CONCATENATE2(arg1, arg2)  arg1##arg2
"""

define_for_each_narg = """\
#define FOR_EACH_NARG(...) FOR_EACH_NARG_(__VA_ARGS__, FOR_EACH_RSEQ_N())
#define FOR_EACH_NARG_(...) FOR_EACH_ARG_N(__VA_ARGS__)
"""

define_for_each = """\
#define FOR_EACH_(N, what, ...) CONCATENATE(FOR_EACH_, N)(what, __VA_ARGS__)
#define FOR_EACH(what, ...) FOR_EACH_(FOR_EACH_NARG(__VA_ARGS__), what, __VA_ARGS__)
"""

#
# Program
#

def start_include_guard(defined: str):
    return f'#ifndef {defined}\n#define {defined}'

def end_include_guard():
    return '#endif'

def generate_serial_multiprint():
    l: List[str] = []

    l.append(serial_multiprint_description)
    l.append(start_include_guard('FOR_EACH_MACRO_H'))
    l.append('')
    l.append(define_concat)
    
    # Print FOR_EACH_#
    l.append(f'#define FOR_EACH_1(what, x, ...) what(x)')
    for i in range(1, for_each_count):
        l.append(f'#define FOR_EACH_{i+1}(what, x, ...) what(x); FOR_EACH_{i}(what, __VA_ARGS__)')

    l.append('')
    l.append(define_for_each_narg)
    l.append(f'#define FOR_EACH_ARG_N({", ".join([f"_{i}" for i in range(1, for_each_count+1)])}, N, ...) N')
    l.append(f'#define FOR_EACH_RSEQ_N() {", ".join([str(i) for i in reversed(range(for_each_count+1))])}')
    l.append('')
    l.append(define_for_each)
    l.append(end_include_guard())

    with open('ForEachMacro.h', 'w') as f:
        f.write('\n'.join([str(line) for line in l]))

if __name__ == '__main__':
    generate_serial_multiprint()